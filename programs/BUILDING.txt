% How to Build [PHYML][phyml] for use with PartitionFinder
% Brett Calcott

<!--

This document is written using markdown. You can make it into a nice PDF file by using pandoc.

-->

# What are you doing?

In general, we try and supply the executable files necessary for running [phyml][phyml], so this documentation is only required if you don't didn't get a binary file or, for some reason, you want to build your own. It's also to remind us of what to do when we build phyml ourselves.

Honestly, it's much easier just to use one of your pre-built binaries, so stop reading now if that's what you'd prefer to do. If you continue, then we're going to assume you've had some experience downloading and compiling things before. 

# What is [PHYML][phyml]?

[PHYML][phyml] is what PartitionFinder uses to do all of the phylogenetic analyses. It all happens in the background, so you're not really aware of it. But without it, nothing will work.

Phyml comes supplied with its own build instructions. Unfortunately, these don't work on Windows. So we've come up with our own simplified method of building it, and these instructions work on all platforms, so they're consistent. It uses a build tool called [Waf][waf]. The build tool is written in [Python][python]. You need Python to run PartitionFinder, finder, so we figure you'll have it installed.

# What you'll need

What you need depends on what Platform you're trying to build on. We'll deal with Platform specific stuff in the follow sections. Then what you'll need in general.

## Mac

Everything should already be here. Go to the All Platforms section.

## Windows

Windows is a painful, largely because [PHYML][phyml] was never built to run on Windows. You'll need quite a few things, unfortunately.

1. First, you need to download and install the gcc compiler for Windows. It called [MinGW][mingw]. The easiest move is to use the [Graphical Installer for MinGW][mingw_inst].

2. Now you need to make sure that the gcc compiler is in the path. The compiler is normally installed to c:\\MinGW\\bin. That folder needs to be in your path. You can find out [how to add something to your path here][winpath].

## All Platforms

Now you've got everything. Now enter these commands:

	cd phyml_source
	python waf configure build install

This should put the phyml executable into the ./programs folder.

# Updating the latest version of PHYML

You can download it by entering the following command in a terminal window:

	svn export --force http://phyml.googlecode.com/svn/trunk/ phyml_source

## Using the Phyml build system

Then enter the following commands:

	cd ./phyml-source/
	./confphy
	cd ./src/

# Checking out the latest version of PartitionFinder

Some stuff here about Git and Subversion.

<!--
# Instructions for making a mac universal binary for PhyML

Here are the architectures that work:

	-arch x86_64 
	-arch ppc 
	-arch i386

For each architecture, edit the following line in configure.ac

    ARCH_flag="-arch x86_64 -mmacosx-version-min=10.4"

by replacing "x86_64" with each of the three architectures in turn

After each one, run ./confphy, and then go into /src and rename the phyml binary appropriately (e.g. Phyml_x86_64)

Do this for all three architectures.

Compile into a universal binary using lipo, as follows:

    lipo [file1] [file2] [file3] -create -output phyml

where file1 is the path to one of the binaries. 

This makes a universal binary that should work on all three architectures.
-->

[python]: http://www.python.org
[phyml]: http://www.atgc-montpellier.fr/phyml/
[waf]: http://code.google.com/p/waf/
[mingw]: http://www.mingw.org/wiki/Getting_Started
[mingw_inst]: http://sourceforge.net/projects/mingw/files/Installer/mingw-get-inst/
[winpath]: http://www.computerhope.com/issues/ch000549.htm

<!-- 
vim: ft=pandoc
-->
